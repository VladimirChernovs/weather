buildscript {
    ext {
        kotlinVersion = "1.3.11"
        springBootVersion = '2.1.1.RELEASE'
        distName = "the-weather-project"
        distVersion = '0.0.1-SNAPSHOT'
    }
    repositories {
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath("org.junit.platform:junit-platform-gradle-plugin:1.0.2")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

plugins {
    id "org.jetbrains.dokka" version "0.9.17"
    id "org.jetbrains.kotlin.jvm" version "1.3.0"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'kotlin-jpa'
apply plugin: 'docker'

if (project.gradle.startParameter.taskNames.find({it=='build'})){
    mainClassName = 'com.chernov.weather.WeatherApp'
}

version = distVersion
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}

configurations {
    providedRuntime
}

allOpen {
    annotation('javax.persistence.Entity')
    annotation('javax.persistence.Embeddable')
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") {
            bomProperty("kotlin.version", "$kotlinVersion")
        }
    }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.jetbrains.kotlin:kotlin-reflect")

    implementation("org.springframework:spring-webflux")
    implementation("org.springframework:spring-context")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    
    implementation('org.springframework.boot:spring-boot-starter-jetty')

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    
    implementation 'io.github.cdimascio:java-dotenv:3.1.3'
    implementation 'io.github.cdimascio:openapi-spring-webflux-validator:1.0.1'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    compile 'org.json:json:20180813'

    implementation("org.slf4j:slf4j-api")
    implementation("ch.qos.logback:logback-classic")

    runtime files('src/main/resources')
    
    // Cache
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("com.github.ben-manes.caffeine:caffeine")

    // Database
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('com.h2database:h2')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.projectreactor:reactor-test')

    testImplementation('io.projectreactor:reactor-test')
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntime("org.junit.jupiter:junit-jupiter-engine")
}